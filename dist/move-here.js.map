{"version":3,"sources":["motion-direction.js","rectangle.js","status-constants.js","id-generator.js","motion-asset.js","mathy.js","motion-adapters/random-motion-adapter.js","timer.js","motion-engine.js","exports.js"],"names":[],"mappings":"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","file":"move-here.js","sourcesContent":["export var MotionDirection = Object.defineProperties({}, {\n   'CURVE_RANDOM': {\n      enumerable: true,\n      value: 'curveRandom'\n   }\n});","export default class Rectangle {\n   constructor({x=0, y=-0, width=0, height=0} = {}) {\n      this._x = x;\n      this._y = y;\n      this._width = width;\n      this._height = height;\n      this._halfWidth = width / 2;\n      this._halfHeight = height / 2;\n      this._eighthWidth = width / 8;\n      this._eighthHeight = height / 8;\n   }\n\n   set x(value){\n      this._x = value;\n   }\n\n   get x(){\n      return this._x;\n   }\n\n   set y(value){\n      this._y = value;\n   }\n\n   get y(){\n      return this._y;\n   }\n\n   set width(value){\n      this._width = value;\n      this._halfWidth = value / 2;\n      this._eighthWidth = value / 8;\n   }\n\n   get width(){\n      return this._width;\n   }\n\n   set height(value){\n      this._height = value;\n      this._halfHeight = value / 2;\n      this._eighthHeight = value / 8;\n   }\n\n   get height(){\n      return this._height;\n   }\n\n   get halfWidth() {\n      return this._halfWidth;\n   }\n\n   get halfHeight() {\n      return this._halfHeight;\n   }\n\n   get eighthWidth() {\n      return this._eighthWidth;\n   }\n\n   get eighthHeight() {\n      return this._eighthHeight;\n   }\n}","export default Object.freeze({\n   BORN: 'born',\n   ALIVE: 'alive',\n   DYING: 'dying',\n   DEAD: 'dead'\n});","let id = 0;\n\nexport default class IdGenerator {\n   static getId() {\n      return id++;\n   }\n};","import MotionDirection from './motion-direction';\nimport IdGenerator from './id-generator';\nimport Status from './status-constants';\n\nconst TARGET_FRAME_RATE = 60;\nconst MIN_ROTATION_PER_FRAME = 1;\n\nexport default class MotionAsset {\n   constructor(target, initTime, duration, unitsPerSecond, rotationPerSecond, motionDirection, rotateToDirection, simulateDepth, spawnLocation) {\n      this._id = IdGenerator.getId();\n      this._target = target;\n      this._initTimeInMilliseconds = initTime;\n      this._duration = duration;\n      this._unitsPerSecond = unitsPerSecond;\n      this._rotationPerSecond = rotationPerSecond;\n      this._rotationPerFrame = rotationPerSecond / TARGET_FRAME_RATE;\n      this._motionDirection = motionDirection;\n      this._rotateToDirection = rotateToDirection;\n      this._unitsPerFrame = unitsPerSecond / TARGET_FRAME_RATE;\n      this._simulateDepth = simulateDepth;\n      this._spawnLocation = spawnLocation;\n      this._acquireRotationDirection = false;\n      this._destinationX = 0;\n      this._destinationY = 0;\n      this._status = Status.BORN;\n      this._rotationAmount = 0;\n      this._rotationDirection = 1;\n      this._rotationProxy = 0;\n\n      // check rotation per frame value to avoid pathing issues\n      if(this._rotationPerFrame < MIN_ROTATION_PER_FRAME) {\n         this._rotationPerFrame = MIN_ROTATION_PER_FRAME;\n      }\n   }\n   get id() {\n      return this._id;\n   }\n   get target() {\n      return this._target;\n   }\n   get duration() {\n      return this._duration;\n   }\n   get unitsPerSecond() {\n      return this._unitsPerSecond;\n   }\n   get unitsPerFrame() {\n      return this._unitsPerFrame;\n   }\n   set status(status) {\n      this._status = status;\n   }\n   get status() {\n      return this._status;\n   }\n   set initTime(timeInMilliseconds) {\n      this._initTimeInMilliseconds = timeInMilliseconds;\n   }\n   get initTime() {\n      return this._initTimeInMilliseconds;\n   }\n   set x(x) {\n      this._target.x = x;\n   }\n   get x() {\n      return this._target.x;\n   }\n   set y(y) {\n      this._target.y = y;\n   }\n   get y() {\n      return this._target.y;\n   }\n   get width() {\n      return this._target.width || 0;\n   }\n   get height() {\n      return this._target.height || 0;\n   }\n   set rotation(rotation) {\n      if(this._rotateToDirection) {\n         this._target.rotation = rotation;\n      } else {\n         this._rotationProxy = rotation;\n      }\n   }\n   get rotation() {\n      if(this._rotateToDirection) {\n         return this._target.rotation;\n      } else {\n         return this._rotationProxy;\n      }\n   }\n   set destinationX(x) {\n      this._destinationX = x;\n   }\n   get destinationX() {\n      return this._destinationX;\n   }\n   set destinationY(y) {\n      this._destinationY = y;\n   }\n   get destinationY() {\n      return this._destinationY;\n   }\n   get rotationPerSecond() {\n      return this._rotationPerSecond;\n   }\n   get rotationPerFrame() {\n      return this._rotationPerFrame;\n   }\n   get motionDirection() {\n      return this._motionDirection;\n   }\n   set rotateToDirection(bool) {\n      this._rotateToDirection = bool;\n   }\n   get rotateToDirection() {\n      return this._rotateToDirection;\n   }\n   set acquireRotationDirection(acquireRotationDirection) {\n      this._acquireRotationDirection = acquireRotationDirection;\n   }\n   get acquireRotationDirection() {\n      return this._acquireRotationDirection;\n   }\n   set rotationAmount(rotationAmount) {\n      this._rotationAmount = rotationAmount;\n   }\n   get rotationAmount() {\n      return this._rotationAmount;\n   }\n   set rotationDirection(rotationDirection) {\n      this._rotationDirection = rotationDirection;\n   }\n   get rotationDirection() {\n      return this._rotationDirection;\n   }\n   set simulateDepth(simulateDepth) {\n      this._simulateDepth = simulateDepth;\n   }\n   get simulateDepth() {\n      return this._simulateDepth;\n   }\n   set spawnLocation(spawnLocation) {\n      this._spawnLocation = spawnLocation;\n   }\n   get spawnLocation() {\n      return this._spawnLocation;\n   }\n}","const RADIANS_CONVERSION = Math.PI/180;\nconst DEGREES_CONVERSION = 180/Math.PI;\n\nexport default class Mathy {\n   static radians(degrees) {\n      return RADIANS_CONVERSION * degrees;\n   }\n   static degrees(radians) {\n      return DEGREES_CONVERSION * radians;\n   }\n   static normalizeAngle(angleInDegrees) {\n      if(angleInDegrees > 360) {\n         while(angleInDegrees > 360) {\n            angleInDegrees -= 360;\n         }\n      } else if(angleInDegrees < -360) {\n         while(angleInDegrees < -360) {\n            angleInDegrees += 360;\n         }\n      }\n      return angleInDegrees;\n   }\n   static getMinAngleDiff(angleInDegrees1, angleInDegrees2) {\n      if((angleInDegrees1 <= 0 && angleInDegrees2 >= 0) || (angleInDegrees1 >= 0 && angleInDegrees2 <= 0)) {\n         let angle1Abs = angleInDegrees1 > 0.0 ? angleInDegrees1 : -angleInDegrees1;\n         let angle2Abs = angleInDegrees2 > 0.0 ? angleInDegrees2 : -angleInDegrees2;\n         let angle1Remainder = 180 - angle1Abs;\n         let angle2Remainder = 180 - angle2Abs;\n         return Math.min(angle1Remainder + angle2Remainder, angle1Abs + angle2Abs);\n      } else {\n         let rotationDiff = angleInDegrees1 - angleInDegrees2;\n         return rotationDiff > 0.0 ? rotationDiff : -rotationDiff;\n      }\n   }\n   static convertRotationToAngle(rotation, xDiff, yDiff) {\n      let currentAngle;\n\n      // Quad 1\n      if(xDiff >= 0 && yDiff < 0) {\n         currentAngle = 90 + rotation;\n         // Quad 2\n      } else if(xDiff >= 0 && yDiff >= 0) {\n         currentAngle = rotation - 90;\n         // Quad 3\n      } else if(xDiff < 0 && yDiff >= 0) {\n         currentAngle = rotation + 270;\n         // Quad 4\n      } else {\n         currentAngle = rotation + 90;\n      }\n\n      return Mathy.normalizeAngle(currentAngle);\n   }\n   static convertAngleToRotation(angle, xDiff, yDiff) {\n      let rotation;\n\n      // Quad 1\n      if(xDiff >= 0 && yDiff < 0) {\n         rotation = 90 - angle;\n         // Quad 2\n      } else if(xDiff >= 0 && yDiff >= 0) {\n         rotation = 90 + angle;\n         // Quad 3\n      } else if(xDiff < 0 && yDiff >= 0) {\n         rotation = -270 + angle;\n         // Quad 4\n      } else {\n         rotation = 90 - angle;\n      }\n\n      return rotation;\n\n   }\n   static distanceBetweenTwoPoints(x1, y1, x2, y2) {\n      return Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));\n   }\n   static getRandomPointInsideRect(motionAsset, rect, uniqueQuad = true) {\n      let randomXRange = {min:0, max:0};\n      let randomYRange = {min:0, max:0};\n      let point = {x: 0, y: 0};\n\n      if(uniqueQuad) {\n         if(motionAsset.x < (rect.x + rect.halfWidth)) {\n            randomXRange.min = rect.eighthWidth;\n            randomXRange.max = rect.halfWidth - randomXRange.min;\n         } else {\n            randomXRange.min = - rect.eighthWidth;\n            randomXRange.max = - rect.halfWidth - randomXRange.min;\n         }\n\n         if(motionAsset.y < (rect.y + rect.halfHeight)) {\n            randomYRange.min = rect.eighthHeight;\n            randomYRange.max = rect.halfHeight - randomYRange.min;\n         } else {\n            randomYRange.min = - rect.eighthHeight;\n            randomYRange.max = - rect.halfHeight - randomYRange.min;\n         }\n      } else {\n         randomXRange.min = rect.x;\n         randomXRange.max = rect.width;\n         randomYRange.min = rect.y;\n         randomYRange.max = rect.height;\n      }\n\n      point.x = motionAsset.x + Math.round(randomXRange.min + Math.random() * randomXRange.max);\n      point.y = motionAsset.y + Math.round(randomYRange.min + Math.random() * randomYRange.max);\n\n      if(point.x > rect.x + rect.width) {\n         point.x = rect.x + rect.width;\n      } else if(point.x < rect.x) {\n         point.x = rect.x;\n      }\n\n      if(point.y > rect.y + rect.height) {\n         point.y = rect.y + rect.height;\n      } else if(point.y < rect.y) {\n         point.y = rect.y;\n      }\n\n      return point;\n   }\n   static getRandomPointOutsideRect(motionAsset, rect) {\n      let point = {x: 0, y: 0};\n      let region = Math.floor(Math.random() * 4);\n      switch(region) {\n         case 0:\n            point.x = rect.x - motionAsset.width;\n            point.y = rect.y + Math.round(Math.random() * rect.height);\n            break;\n         case 1:\n            point.x = rect.x + Math.round(Math.random() * rect.width);\n            point.y = rect.y - motionAsset.height;\n            break;\n         case 2:\n            point.x = (rect.x + rect.width) + motionAsset.width;\n            point.y = rect.y + Math.round(Math.random() * rect.height);\n            break;\n         case 3:\n            point.x = rect.x + Math.round(Math.random() * rect.width);\n            point.y = rect.y + rect.height + motionAsset.height;\n            break;\n         default:\n            break;\n\n      }\n\n      return point;\n   }\n};","const OUTSIDE_TARGET_AREA = 'outside';\nconst INSIDE_TARGET_AREA = 'inside';\nconst MIN_SCALE = .5;\nconst MAX_SCALE = 1.5;\n\nimport Mathy from '../mathy';\nimport Status from '../status-constants';\n\nlet getPositionDelta = function(motionAsset) {\n   let positionDelta = {};\n   positionDelta.x = motionAsset.destinationX - motionAsset.x;\n   positionDelta.y = motionAsset.destinationY - motionAsset.y;\n   return positionDelta;\n};\n\nlet setNewDestinationPoint = function(motionAsset, boundingRectangle, location) {\n   let destinationPoint;\n   if(location === 'inside') {\n      destinationPoint = Mathy.getRandomPointInsideRect(motionAsset, boundingRectangle);\n   } else {\n      destinationPoint = Mathy.getRandomPointOutsideRect(motionAsset, boundingRectangle);\n   }\n\n   motionAsset.destinationX = destinationPoint.x;\n   motionAsset.destinationY = destinationPoint.y;\n};\n\nlet resetRotationDirection = function(motionAsset) {\n   motionAsset.acquireRotationDirection = true;\n   motionAsset.rotationAmount = 0;\n};\n\nlet setAssetStateBasedOnTime = function(motionAsset, timeInMilliseconds, boundingRectangle) {\n   if(motionAsset.status === Status.ALIVE && motionAsset.duration !== -1 && (timeInMilliseconds - motionAsset.initTime) >= motionAsset.duration) {\n      setNewDestinationPoint(motionAsset, boundingRectangle, 'outside');\n      resetRotationDirection(motionAsset);\n      motionAsset.status = Status.DYING;\n   }\n};\n\nlet setScale = function(motionAsset, boundingRectangle) {\n   if (motionAsset.simulateDepth) {\n      let newScale = MIN_SCALE + (((motionAsset.y - boundingRectangle.y) / boundingRectangle.height) * (MAX_SCALE - MIN_SCALE));\n\n      if (newScale < MIN_SCALE) {\n         newScale = MIN_SCALE;\n      }\n      if(newScale > MAX_SCALE) {\n         newScale = MAX_SCALE;\n      }\n\n      motionAsset.scaleX = motionAsset.scaleY = newScale;\n   }\n};\n\nlet setRotation = function(motionAsset, positionDelta) {\n   let distance = Mathy.distanceBetweenTwoPoints(motionAsset.x, motionAsset.y, motionAsset.destinationX, motionAsset.destinationY);\n   if(distance === 0) {\n      return;\n   }\n   let nextRotation = motionAsset.rotation;\n   let calculatedAngle = Math.round(Mathy.degrees(Math.acos(positionDelta.x/distance)));\n   let calculatedRotation = Mathy.convertAngleToRotation(calculatedAngle, positionDelta.x, positionDelta.y);\n   let rotationDiff = Mathy.getMinAngleDiff(calculatedRotation, nextRotation);\n\n   if(rotationDiff <= motionAsset.rotationPerFrame) {\n      nextRotation = calculatedRotation;\n   } else {\n      if(motionAsset.acquireRotationDirection) {\n         motionAsset.acquireRotationDirection = false;\n         if(calculatedAngle < nextRotation) {\n            motionAsset.rotationDirection = -1;\n         } else {\n            motionAsset.rotationDirection = 1;\n         }\n      }\n\n      // determine rotation modifier, this only comes into play when an object has rotated more than\n      // 360 degrees around the destination point.  We need to increase the speed of rotation to it\n      // so it can reach its destination eventually.\n      let rotationModifier = (motionAsset.rotationAmount/360 <= 1 ? 1 : motionAsset.rotationAmount/360);\n\n      nextRotation += (motionAsset.rotationDirection * motionAsset.rotationPerFrame * rotationModifier);\n      nextRotation = Mathy.normalizeAngle(nextRotation);\n   }\n   motionAsset.rotationAmount += Mathy.getMinAngleDiff(motionAsset.rotation, nextRotation);\n   motionAsset.rotation = nextRotation;\n};\n\nlet setTranslation = function(motionAsset, positionDelta) {\n   if(Math.abs(positionDelta.x) < motionAsset.unitsPerFrame && Math.abs(positionDelta.y) < motionAsset.unitsPerFrame) {\n      if(motionAsset.status === Status.DYING) {\n         motionAsset.status = Status.DEAD;\n      }\n      motionAsset.x = motionAsset.destinationX;\n      motionAsset.y = motionAsset.destinationY;\n   } else {\n      let currentAngleRadians = Mathy.radians(Mathy.convertRotationToAngle(motionAsset.rotation, positionDelta.x, positionDelta.y));\n      if(positionDelta.y < 0) {\n         motionAsset.x -= (Math.cos(currentAngleRadians) * motionAsset.unitsPerFrame);\n         motionAsset.y -= (Math.sin(currentAngleRadians) * motionAsset.unitsPerFrame);\n      } else {\n         motionAsset.x += (Math.cos(currentAngleRadians) * motionAsset.unitsPerFrame);\n         motionAsset.y += (Math.sin(currentAngleRadians) * motionAsset.unitsPerFrame);\n      }\n   }\n};\n\nlet doesAssetNeedNewDestinationPoint = function(motionAsset) {\n   return (motionAsset.x === motionAsset.destinationX && motionAsset.y === motionAsset.destinationY);\n};\n\nexport default class RandomMotionAdapter {\n   constructor(boundingRectangle) {\n      this._boundingRectangle = boundingRectangle;\n      this._motionAssets = {};\n   }\n   addAsset(motionAsset) {\n      let initPoint;\n      if(motionAsset.spawnLocation === 'inside') {\n         initPoint = Mathy.getRandomPointInsideRect(motionAsset, this._boundingRectangle, false);\n      } else {\n         initPoint = Mathy.getRandomPointOutsideRect(motionAsset, this._boundingRectangle);\n      }\n      motionAsset.x = initPoint.x;\n      motionAsset.y = initPoint.y;\n\n      setNewDestinationPoint(motionAsset, this._boundingRectangle, 'inside');\n      resetRotationDirection(motionAsset);\n      setScale(motionAsset, this._boundingRectangle);\n\n      motionAsset.status = Status.ALIVE;\n\n      this._motionAssets[motionAsset.id] = motionAsset;\n   }\n   update(timeInMilliseconds) {\n      let motionAsset;\n      let positionDelta;\n\n      Object.keys(this._motionAssets).forEach((key) => {\n         motionAsset = this._motionAssets[key];\n\n         setAssetStateBasedOnTime(motionAsset, timeInMilliseconds, this._boundingRectangle);\n\n         positionDelta = getPositionDelta(motionAsset);\n         setScale(motionAsset, this._boundingRectangle);\n         setRotation(motionAsset, positionDelta);\n         setTranslation(motionAsset, positionDelta);\n\n         if(doesAssetNeedNewDestinationPoint(motionAsset)) {\n            setNewDestinationPoint(motionAsset, this._boundingRectangle, 'inside');\n            resetRotationDirection(motionAsset);\n         }\n\n         if(motionAsset.status === Status.DEAD) {\n            delete this._motionAssets[key];\n         }\n      });\n   }\n};\n","export default class Timer {\n   constructor() {\n      this._requestAnimationId = null;\n      this._paused = true;\n      this._currentTime = 0;\n      this._lastTime = 0;\n      this._timeInMilliseconds = 0;\n      this._timeUpdateHandlers = [];\n   }\n   _tick() {\n      this._requestAnimationId = null;\n      this._currentTime = performance.now();\n      this._timeInMilliseconds += (this._currentTime - this._lastTime);\n      this._lastTime = this._currentTime;\n      this._timeUpdateHandlers.every((timeUpdateHandler) => {\n         timeUpdateHandler(this._timeInMilliseconds);\n      });\n      if(!this._paused) {\n         this._requestAnimationId = requestAnimationFrame(() => this._tick());\n      }\n   }\n   get paused() {\n      return this._paused;\n   }\n   get time() {\n      return this._timeInMilliseconds;\n   }\n   addTimeUpdateListener(eventHandler) {\n      this._timeUpdateHandlers.push(eventHandler);\n   }\n   play() {\n      this._paused = false;\n      this._lastTime = performance.now();\n      this._requestAnimationId = requestAnimationFrame(() => this._tick());\n   }\n   pause() {\n      if(this._requestAnimationId) {\n         cancelAnimationFrame(this._requestAnimationId);\n         this._requestAnimationId = null;\n      }\n      this._paused = true;\n   }\n}","import Rectangle from './rectangle';\nimport {MotionDirection} from './motion-direction';\nimport RandomMotionAdapter from './motion-adapters/random-motion-adapter';\nimport Timer from './timer';\nimport MotionAsset from './motion-asset';\n\nconst MIN_DURATION = 2000;\nconst MIN_UNITS_PER_SECOND = 30;\nconst MIN_ROTATION_SPEED_MODIFIER = 1;\n\nexport default class MotionEngine {\n   constructor(rect=new Rectangle()) {\n      this._boundingRectangle = rect;\n      this._timer = new Timer();\n      this._adaptersMap = {};\n\n      let randomMotionAdapter = new RandomMotionAdapter(this._boundingRectangle);\n      this._timer.addTimeUpdateListener(randomMotionAdapter.update.bind(randomMotionAdapter));\n\n      this._adaptersMap[MotionDirection.CURVE_RANDOM] = randomMotionAdapter;\n   }\n   get paused(){\n      return this._timer.paused;\n   }\n   start() {\n      this._timer.play();\n   }\n   stop() {\n      this._timer.pause();\n   }\n   addAsset({target=null, motionDirection=MotionDirection.CURVE_RANDOM, duration = MIN_DURATION, unitsPerSecond = MIN_UNITS_PER_SECOND, rotationSpeedModifier = MIN_ROTATION_SPEED_MODIFIER, rotateToDirection = true, simulateDepth = false, spawnLocation = 'outside'} = {}) {\n      // TODO: provide way to map transform (x, y, rotation, scale...) properties to target passed\n      let motionAdapter = this._adaptersMap[motionDirection];\n      if(!motionAdapter) {\n         throw new Error('MotionEngine - No motion adapter found with supplied motion direction of (' + motionDirection + ')');\n      }\n\n      let rotationSpeed = Math.round(unitsPerSecond * rotationSpeedModifier);\n      let motionAsset = new MotionAsset(target, this._timer.time, duration, unitsPerSecond, rotationSpeed, motionDirection, rotateToDirection, simulateDepth, spawnLocation);\n\n      motionAdapter.addAsset(motionAsset);\n\n      return motionAsset;\n   }\n}","var MoveHere = window.MoveHere = window.MoveHere || {};\n\nimport Rectangle from './rectangle';\nimport {MotionDirection} from './motion-direction';\nimport MotionEngine from './motion-engine';\n\nMoveHere.MotionDirection = MotionDirection;\nMoveHere.Rectangle = Rectangle;\nMoveHere.MotionEngine = MotionEngine;"],"sourceRoot":"/source/"}