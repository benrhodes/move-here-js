{"version":3,"sources":["motion-direction.js","rectangle.js","status-constants.js","id-generator.js","motion-asset.js","mathy.js","motion-adapters/random-motion-adapter.js","timer.js","motion-engine.js","exports.js"],"names":[],"mappings":"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","file":"move-here.js","sourcesContent":["export var MotionDirection = Object.defineProperties({}, {\n   'CURVE_RANDOM': {\n      enumerable: true,\n      value: 'curveRandom'\n   }\n});","export default class Rectangle {\n   constructor({x=0, y=-0, width=0, height=0} = {}) {\n      this._x = x;\n      this._y = y;\n      this._width = width;\n      this._height = height;\n      this._halfWidth = width / 2;\n      this._halfHeight = height / 2;\n      this._eighthWidth = width / 8;\n      this._eighthHeight = height / 8;\n   }\n\n   set x(value){\n      this._x = value;\n   }\n\n   get x(){\n      return this._x;\n   }\n\n   set y(value){\n      this._y = value;\n   }\n\n   get y(){\n      return this._y;\n   }\n\n   set width(value){\n      this._width = value;\n      this._halfWidth = value / 2;\n      this._eighthWidth = value / 8;\n   }\n\n   get width(){\n      return this._width;\n   }\n\n   set height(value){\n      this._height = value;\n      this._halfHeight = value / 2;\n      this._eighthHeight = value / 8;\n   }\n\n   get height(){\n      return this._height;\n   }\n\n   get halfWidth() {\n      return this._halfWidth;\n   }\n\n   get halfHeight() {\n      return this._halfHeight;\n   }\n\n   get eighthWidth() {\n      return this._eighthWidth;\n   }\n\n   get eighthHeight() {\n      return this._eighthHeight;\n   }\n}","export default Object.freeze({\n   BORN: 'born',\n   ALIVE: 'alive',\n   DYING: 'dying',\n   DEAD: 'dead'\n});","let id = 0;\n\nexport default class IdGenerator {\n   static getId() {\n      return id++;\n   }\n};","import MotionDirection from './motion-direction';\nimport IdGenerator from './id-generator';\nimport Status from './status-constants';\n\nconst TARGET_FRAME_RATE = 60;\nconst MIN_ROTATION_PER_FRAME = 1;\n\nexport default class MotionAsset {\n   constructor(target, initTime, duration, unitsPerSecond, rotationPerSecond, motionDirection, rotateToDirection, simulateDepth, spawnLocation) {\n      this._id = IdGenerator.getId();\n      this._target = target;\n      this._initTimeInMilliseconds = initTime;\n      this._duration = duration;\n      this._unitsPerSecond = unitsPerSecond;\n      this._rotationPerSecond = rotationPerSecond;\n      this._rotationPerFrame = rotationPerSecond / TARGET_FRAME_RATE;\n      this._motionDirection = motionDirection;\n      this._rotateToDirection = rotateToDirection;\n      this._unitsPerFrame = unitsPerSecond / TARGET_FRAME_RATE;\n      this._simulateDepth = simulateDepth;\n      this._spawnLocation = spawnLocation;\n      this._acquireRotationDirection = false;\n      this._destinationX = 0;\n      this._destinationY = 0;\n      this._status = Status.BORN;\n      this._rotationAmount = 0;\n      this._rotationDirection = 1;\n      this._rotationProxy = 0;\n\n      // check rotation per frame value to avoid pathing issues\n      if(this._rotationPerFrame < MIN_ROTATION_PER_FRAME) {\n         this._rotationPerFrame = MIN_ROTATION_PER_FRAME;\n      }\n   }\n   get id() {\n      return this._id;\n   }\n   get target() {\n      return this._target;\n   }\n   get duration() {\n      return this._duration;\n   }\n   get unitsPerSecond() {\n      return this._unitsPerSecond;\n   }\n   get unitsPerFrame() {\n      return this._unitsPerFrame;\n   }\n   set status(status) {\n      this._status = status;\n   }\n   get status() {\n      return this._status;\n   }\n   set initTime(timeInMilliseconds) {\n      this._initTimeInMilliseconds = timeInMilliseconds;\n   }\n   get initTime() {\n      return this._initTimeInMilliseconds;\n   }\n   set x(x) {\n      this._target.x = x;\n   }\n   get x() {\n      return this._target.x;\n   }\n   set y(y) {\n      this._target.y = y;\n   }\n   get y() {\n      return this._target.y;\n   }\n   get width() {\n      return this._target.width || 0;\n   }\n   get height() {\n      return this._target.height || 0;\n   }\n   set rotation(rotation) {\n      if(this._rotateToDirection) {\n         this._target.rotation = rotation;\n      } else {\n         this._rotationProxy = rotation;\n      }\n   }\n   get rotation() {\n      if(this._rotateToDirection) {\n         return this._target.rotation;\n      } else {\n         return this._rotationProxy;\n      }\n   }\n   set destinationX(x) {\n      this._destinationX = x;\n   }\n   get destinationX() {\n      return this._destinationX;\n   }\n   set destinationY(y) {\n      this._destinationY = y;\n   }\n   get destinationY() {\n      return this._destinationY;\n   }\n   get rotationPerSecond() {\n      return this._rotationPerSecond;\n   }\n   get rotationPerFrame() {\n      return this._rotationPerFrame;\n   }\n   get motionDirection() {\n      return this._motionDirection;\n   }\n   set rotateToDirection(bool) {\n      this._rotateToDirection = bool;\n   }\n   get rotateToDirection() {\n      return this._rotateToDirection;\n   }\n   set acquireRotationDirection(acquireRotationDirection) {\n      this._acquireRotationDirection = acquireRotationDirection;\n   }\n   get acquireRotationDirection() {\n      return this._acquireRotationDirection;\n   }\n   set rotationAmount(rotationAmount) {\n      this._rotationAmount = rotationAmount;\n   }\n   get rotationAmount() {\n      return this._rotationAmount;\n   }\n   set rotationDirection(rotationDirection) {\n      this._rotationDirection = rotationDirection;\n   }\n   get rotationDirection() {\n      return this._rotationDirection;\n   }\n   set simulateDepth(simulateDepth) {\n      this._simulateDepth = simulateDepth;\n   }\n   get simulateDepth() {\n      return this._simulateDepth;\n   }\n   set spawnLocation(spawnLocation) {\n      this._spawnLocation = spawnLocation;\n   }\n   get spawnLocation() {\n      return this._spawnLocation;\n   }\n}","const RADIANS_CONVERSION = Math.PI/180;\nconst DEGREES_CONVERSION = 180/Math.PI;\n\nexport default class Mathy {\n   static radians(degrees) {\n      return RADIANS_CONVERSION * degrees;\n   }\n   static degrees(radians) {\n      return DEGREES_CONVERSION * radians;\n   }\n   static normalizeAngle(angleInDegrees) {\n      if(angleInDegrees > 360) {\n         while(angleInDegrees > 360) {\n            angleInDegrees -= 360;\n         }\n      } else if(angleInDegrees < -360) {\n         while(angleInDegrees < -360) {\n            angleInDegrees += 360;\n         }\n      }\n      return angleInDegrees;\n   }\n   static getMinAngleDiff(angleInDegrees1, angleInDegrees2) {\n      if((angleInDegrees1 <= 0 && angleInDegrees2 >= 0) || (angleInDegrees1 >= 0 && angleInDegrees2 <= 0)) {\n         let angle1Abs = angleInDegrees1 > 0.0 ? angleInDegrees1 : -angleInDegrees1;\n         let angle2Abs = angleInDegrees2 > 0.0 ? angleInDegrees2 : -angleInDegrees2;\n         let angle1Remainder = 180 - angle1Abs;\n         let angle2Remainder = 180 - angle2Abs;\n         return Math.min(angle1Remainder + angle2Remainder, angle1Abs + angle2Abs);\n      } else {\n         let rotationDiff = angleInDegrees1 - angleInDegrees2;\n         return rotationDiff > 0.0 ? rotationDiff : -rotationDiff;\n      }\n   }\n   static convertRotationToAngle(rotation, xDiff, yDiff) {\n      let currentAngle;\n\n      // Quad 1\n      if(xDiff >= 0 && yDiff < 0) {\n         currentAngle = 90 + rotation;\n         // Quad 2\n      } else if(xDiff >= 0 && yDiff >= 0) {\n         currentAngle = rotation - 90;\n         // Quad 3\n      } else if(xDiff < 0 && yDiff >= 0) {\n         currentAngle = rotation + 270;\n         // Quad 4\n      } else {\n         currentAngle = rotation + 90;\n      }\n\n      return Mathy.normalizeAngle(currentAngle);\n   }\n   static convertAngleToRotation(angle, xDiff, yDiff) {\n      let rotation;\n\n      // Quad 1\n      if(xDiff >= 0 && yDiff < 0) {\n         rotation = 90 - angle;\n         // Quad 2\n      } else if(xDiff >= 0 && yDiff >= 0) {\n         rotation = 90 + angle;\n         // Quad 3\n      } else if(xDiff < 0 && yDiff >= 0) {\n         rotation = -270 + angle;\n         // Quad 4\n      } else {\n         rotation = 90 - angle;\n      }\n\n      return rotation;\n\n   }\n   static distanceBetweenTwoPoints(x1, y1, x2, y2) {\n      return Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));\n   }\n   static getRandomPointInsideRect(motionAsset, rect, uniqueQuad = true) {\n      let randomXRange = {min:0, max:0};\n      let randomYRange = {min:0, max:0};\n      let point = {x: 0, y: 0};\n\n      if(uniqueQuad) {\n         if(motionAsset.x < (rect.x + rect.halfWidth)) {\n            randomXRange.min = rect.eighthWidth;\n            randomXRange.max = rect.halfWidth - randomXRange.min;\n         } else {\n            randomXRange.min = - rect.eighthWidth;\n            randomXRange.max = - rect.halfWidth - randomXRange.min;\n         }\n\n         if(motionAsset.y < (rect.y + rect.halfHeight)) {\n            randomYRange.min = rect.eighthHeight;\n            randomYRange.max = rect.halfHeight - randomYRange.min;\n         } else {\n            randomYRange.min = - rect.eighthHeight;\n            randomYRange.max = - rect.halfHeight - randomYRange.min;\n         }\n      } else {\n         randomXRange.min = rect.x;\n         randomXRange.max = rect.width;\n         randomYRange.min = rect.y;\n         randomYRange.max = rect.height;\n      }\n\n      point.x = motionAsset.x + Math.round(randomXRange.min + Math.random() * randomXRange.max);\n      point.y = motionAsset.y + Math.round(randomYRange.min + Math.random() * randomYRange.max);\n\n      if(point.x > rect.x + rect.width) {\n         point.x = rect.x + rect.width;\n      } else if(point.x < rect.x) {\n         point.x = rect.x;\n      }\n\n      if(point.y > rect.y + rect.height) {\n         point.y = rect.y + rect.height;\n      } else if(point.y < rect.y) {\n         point.y = rect.y;\n      }\n\n      return point;\n   }\n   static getRandomPointOutsideRect(motionAsset, rect) {\n      let point = {x: 0, y: 0};\n      let region = Math.floor(Math.random() * 4);\n      switch(region) {\n         case 0:\n            point.x = rect.x - motionAsset.width;\n            point.y = rect.y + Math.round(Math.random() * rect.height);\n            break;\n         case 1:\n            point.x = rect.x + Math.round(Math.random() * rect.width);\n            point.y = rect.y - motionAsset.height;\n            break;\n         case 2:\n            point.x = (rect.x + rect.width) + motionAsset.width;\n            point.y = rect.y + Math.round(Math.random() * rect.height);\n            break;\n         case 3:\n            point.x = rect.x + Math.round(Math.random() * rect.width);\n            point.y = rect.y + rect.height + motionAsset.height;\n            break;\n         default:\n            break;\n\n      }\n\n      return point;\n   }\n};","const OUTSIDE_TARGET_AREA = 'outside';\nconst INSIDE_TARGET_AREA = 'inside';\nconst MIN_SCALE = .5;\nconst MAX_SCALE = 1.5;\n\nimport Mathy from '../mathy';\nimport Status from '../status-constants';\n\nlet getPositionDelta = function(motionAsset) {\n   let positionDelta = {};\n   positionDelta.x = motionAsset.destinationX - motionAsset.x;\n   positionDelta.y = motionAsset.destinationY - motionAsset.y;\n   return positionDelta;\n};\n\nlet setNewDestinationPoint = function(motionAsset, boundingRectangle, location) {\n   let destinationPoint;\n   if(location === 'inside') {\n      destinationPoint = Mathy.getRandomPointInsideRect(motionAsset, boundingRectangle);\n   } else {\n      destinationPoint = Mathy.getRandomPointOutsideRect(motionAsset, boundingRectangle);\n   }\n\n   motionAsset.destinationX = destinationPoint.x;\n   motionAsset.destinationY = destinationPoint.y;\n};\n\nlet resetRotationDirection = function(motionAsset) {\n   motionAsset.acquireRotationDirection = true;\n   motionAsset.rotationAmount = 0;\n};\n\nlet setAssetStateBasedOnTime = function(motionAsset, timeInMilliseconds, boundingRectangle) {\n   if(motionAsset.status === Status.ALIVE && motionAsset.duration !== -1 && (timeInMilliseconds - motionAsset.initTime) >= motionAsset.duration) {\n      setNewDestinationPoint(motionAsset, boundingRectangle, 'outside');\n      resetRotationDirection(motionAsset);\n      motionAsset.status = Status.DYING;\n   }\n};\n\nlet setScale = function(motionAsset, boundingRectangle) {\n   if (motionAsset.simulateDepth) {\n      let newScale = MIN_SCALE + (((motionAsset.y - boundingRectangle.y) / boundingRectangle.height) * (MAX_SCALE - MIN_SCALE));\n\n      if (newScale < MIN_SCALE) {\n         newScale = MIN_SCALE;\n      }\n      if(newScale > MAX_SCALE) {\n         newScale = MAX_SCALE;\n      }\n\n      motionAsset.scaleX = motionAsset.scaleY = newScale;\n   }\n};\n\nlet setRotation = function(motionAsset, positionDelta) {\n   let distance = Mathy.distanceBetweenTwoPoints(motionAsset.x, motionAsset.y, motionAsset.destinationX, motionAsset.destinationY);\n   if(distance === 0) {\n      return;\n   }\n   let nextRotation = motionAsset.rotation;\n   let calculatedAngle = Math.round(Mathy.degrees(Math.acos(positionDelta.x/distance)));\n   let calculatedRotation = Mathy.convertAngleToRotation(calculatedAngle, positionDelta.x, positionDelta.y);\n   let rotationDiff = Mathy.getMinAngleDiff(calculatedRotation, nextRotation);\n\n   if(rotationDiff <= motionAsset.rotationPerFrame) {\n      nextRotation = calculatedRotation;\n   } else {\n      if(motionAsset.acquireRotationDirection) {\n         motionAsset.acquireRotationDirection = false;\n         if(calculatedAngle < nextRotation) {\n            motionAsset.rotationDirection = -1;\n         } else {\n            motionAsset.rotationDirection = 1;\n         }\n      }\n\n      // determine rotation modifier, this only comes into play when an object has rotated more than\n      // 360 degrees around the destination point.  We need to increase the speed of rotation to it\n      // so it can reach its destination eventually.\n      let rotationModifier = (motionAsset.rotationAmount/360 <= 1 ? 1 : motionAsset.rotationAmount/360);\n\n      nextRotation += (motionAsset.rotationDirection * motionAsset.rotationPerFrame * rotationModifier);\n      nextRotation = Mathy.normalizeAngle(nextRotation);\n   }\n   motionAsset.rotationAmount += Mathy.getMinAngleDiff(motionAsset.rotation, nextRotation);\n   motionAsset.rotation = nextRotation;\n};\n\nlet setTranslation = function(motionAsset, positionDelta) {\n   if(Math.abs(positionDelta.x) < motionAsset.unitsPerFrame && Math.abs(positionDelta.y) < motionAsset.unitsPerFrame) {\n      if(motionAsset.status === Status.DYING) {\n         motionAsset.status = Status.DEAD;\n      }\n      motionAsset.x = motionAsset.destinationX;\n      motionAsset.y = motionAsset.destinationY;\n   } else {\n      let currentAngleRadians = Mathy.radians(Mathy.convertRotationToAngle(motionAsset.rotation, positionDelta.x, positionDelta.y));\n      if(positionDelta.y < 0) {\n         motionAsset.x -= (Math.cos(currentAngleRadians) * motionAsset.unitsPerFrame);\n         motionAsset.y -= (Math.sin(currentAngleRadians) * motionAsset.unitsPerFrame);\n      } else {\n         motionAsset.x += (Math.cos(currentAngleRadians) * motionAsset.unitsPerFrame);\n         motionAsset.y += (Math.sin(currentAngleRadians) * motionAsset.unitsPerFrame);\n      }\n   }\n};\n\nlet doesAssetNeedNewDestinationPoint = function(motionAsset) {\n   return (motionAsset.x === motionAsset.destinationX && motionAsset.y === motionAsset.destinationY);\n};\n\nexport default class RandomMotionAdapter {\n   constructor(boundingRectangle) {\n      this._boundingRectangle = boundingRectangle;\n      this._motionAssets = {};\n   }\n   addAsset(motionAsset) {\n      let initPoint;\n      if(motionAsset.spawnLocation === 'inside') {\n         initPoint = Mathy.getRandomPointInsideRect(motionAsset, this._boundingRectangle, false);\n      } else {\n         initPoint = Mathy.getRandomPointOutsideRect(motionAsset, this._boundingRectangle);\n      }\n      motionAsset.x = initPoint.x;\n      motionAsset.y = initPoint.y;\n\n      setNewDestinationPoint(motionAsset, this._boundingRectangle, 'inside');\n      resetRotationDirection(motionAsset);\n      setScale(motionAsset, this._boundingRectangle);\n\n      motionAsset.status = Status.ALIVE;\n\n      this._motionAssets[motionAsset.id] = motionAsset;\n   }\n   update(timeInMilliseconds) {\n      let motionAsset;\n      let positionDelta;\n\n      Object.keys(this._motionAssets).forEach((key) => {\n         motionAsset = this._motionAssets[key];\n\n         setAssetStateBasedOnTime(motionAsset, timeInMilliseconds, this._boundingRectangle);\n\n         positionDelta = getPositionDelta(motionAsset);\n         setScale(motionAsset, this._boundingRectangle);\n         setRotation(motionAsset, positionDelta);\n         setTranslation(motionAsset, positionDelta);\n\n         if(doesAssetNeedNewDestinationPoint(motionAsset)) {\n            setNewDestinationPoint(motionAsset, this._boundingRectangle, 'inside');\n            resetRotationDirection(motionAsset);\n         }\n\n         if(motionAsset.status === Status.DEAD) {\n            delete this._motionAssets[key];\n         }\n      });\n   }\n};\n","export default class Timer {\n   constructor() {\n      this._requestAnimationId = null;\n      this._paused = true;\n      this._currentTime = 0;\n      this._lastTime = 0;\n      this._timeInMilliseconds = 0;\n      this._timeUpdateHandlers = [];\n   }\n   _tick() {\n      this._requestAnimationId = null;\n      this._currentTime = performance.now();\n      this._timeInMilliseconds += (this._currentTime - this._lastTime);\n      this._lastTime = this._currentTime;\n      this._timeUpdateHandlers.every((timeUpdateHandler) => {\n         timeUpdateHandler(this._timeInMilliseconds);\n      });\n      if(!this._paused) {\n         this._requestAnimationId = requestAnimationFrame(() => this._tick());\n      }\n   }\n   get paused() {\n      return this._paused;\n   }\n   get time() {\n      return this._timeInMilliseconds;\n   }\n   addTimeUpdateListener(eventHandler) {\n      this._timeUpdateHandlers.push(eventHandler);\n   }\n   play() {\n      this._paused = false;\n      this._lastTime = performance.now();\n      this._requestAnimationId = requestAnimationFrame(() => this._tick());\n   }\n   pause() {\n      if(this._requestAnimationId) {\n         cancelAnimationFrame(this._requestAnimationId);\n         this._requestAnimationId = null;\n      }\n      this._paused = true;\n   }\n}","import Rectangle from './rectangle';\nimport {MotionDirection} from './motion-direction';\nimport RandomMotionAdapter from './motion-adapters/random-motion-adapter';\nimport Timer from './timer';\nimport MotionAsset from './motion-asset';\n\nconst MIN_DURATION = 2000;\nconst MIN_UNITS_PER_SECOND = 30;\nconst MIN_ROTATION_SPEED_MODIFIER = 1;\n\nexport default class MotionEngine {\n   constructor(rect=new Rectangle()) {\n      this._boundingRectangle = rect;\n      this._timer = new Timer();\n      this._adaptersMap = {};\n\n      let randomMotionAdapter = new RandomMotionAdapter(this._boundingRectangle);\n      this._timer.addTimeUpdateListener(randomMotionAdapter.update.bind(randomMotionAdapter));\n\n      this._adaptersMap[MotionDirection.CURVE_RANDOM] = randomMotionAdapter;\n   }\n   get paused(){\n      return this._timer.paused;\n   }\n   start() {\n      this._timer.play();\n   }\n   stop() {\n      this._timer.pause();\n   }\n   addAsset({target=null, motionDirection=MotionDirection.CURVE_RANDOM, duration = MIN_DURATION, unitsPerSecond = MIN_UNITS_PER_SECOND, rotationSpeedModifier = MIN_ROTATION_SPEED_MODIFIER, rotateToDirection = true, simulateDepth = false, spawnLocation = 'outside'} = {}) {\n      // TODO: provide way to map transform (x, y, rotation, scale...) properties to target passed\n      let motionAdapter = this._adaptersMap[motionDirection];\n      if(!motionAdapter) {\n         throw new Error('MotionEngine - No motion adapter found with supplied motion direction of (' + motionDirection + ')');\n      }\n\n      let rotationSpeed = Math.round(unitsPerSecond * rotationSpeedModifier);\n      let motionAsset = new MotionAsset(target, this._timer.time, duration, unitsPerSecond, rotationSpeed, motionDirection, rotateToDirection, simulateDepth, spawnLocation);\n\n      motionAdapter.addAsset(motionAsset);\n\n      return motionAsset;\n   }\n}","var MoveHere = window.MoveHere = window.MoveHere || {};\n\nimport Rectangle from './rectangle';\nimport {MotionDirection} from './motion-direction';\nimport MotionEngine from './motion-engine';\n\nMoveHere.MotionDirection = MotionDirection;\nMoveHere.Rectangle = Rectangle;\nMoveHere.MotionEngine = MotionEngine;"],"sourceRoot":"/source/"}